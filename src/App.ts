import { Markup, Telegraf, Telegram } from 'telegraf';
import dotenv from 'dotenv';
import * as fs from 'fs';
import { FileType, FolderType } from './types';
import { getFolderList } from './getFolderList';
import { deletePreviousVideo } from './deletePreviousVideo';
import { isUserAllowed, addUser, getAllUsers, removeUser } from './userServices';
import { sendWelcome } from './start';
import { getDB, initDB } from '../data/db';
import Database from 'better-sqlite3';
import path from 'path';
import { downloadDatabaseFromDrive } from './googleDriveService';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN as string);
const foldersData = JSON.parse(fs.readFileSync('./data/videoAPI.json', 'utf-8'));
const fileIdMap = new Map<string, string>();
let videoCounter = 0;

const ADMIN = parseInt(process.env.ADMIN_OWNER_ID || '0', 10);

export let db: Database.Database;
const dbPath = path.resolve(__dirname, '../../data/users.db');

//method to keep the last video sent per user in memory
const lastVideoMessageMap = new Map<number, number>(); // chatId ‚Üí messageId

// method to keep the folder state per user in memory
const userFolderState = new Map<number, string>(); // chatId ‚Üí folderId

// method to keep track of pending requests
const pendingRequests = new Map<number, { chatId: number, messageId: number }>();

bot.command('start', async (ctx) => {
  const id = ctx.from.id;
  const username = ctx.from.username;

  if (isUserAllowed(id) || ADMIN === id) {
    return sendWelcome(bot, id);
  }

  ctx.reply(
    `‚õîÔ∏è –î–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–æ.\nüÜî –í–∞—à user ID: <code>${id}</code>\nUsername: @${username || '–Ω–µ–º–∞—î'}`,
    { parse_mode: 'HTML' }
  );

  const requestMsg = await ctx.reply(
    'üîê –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø:',
    Markup.inlineKeyboard([
      Markup.button.callback('üîì –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ—Å—Ç—É–ø', `request_access_${id}`)
    ])
  );

  // 3. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞—Ä—Ç—É (—â–æ–± –ø–æ—Ç—ñ–º –≤–∏–¥–∞–ª–∏—Ç–∏)
  pendingRequests.set(id, {
    chatId: ctx.chat.id,
    messageId: requestMsg.message_id
  });
});

bot.action(/request_access_(\d+)/, async (ctx) => {
  const requestedId = parseInt(ctx.match[1]);
  const from = ctx.from;

  if (requestedId !== from.id) {
    return ctx.answerCbQuery('‚ö†Ô∏è –¶–µ –Ω–µ –≤–∞—à –∑–∞–ø–∏—Ç.');
  }

  ctx.answerCbQuery('üì© –ó–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');

  bot.telegram.sendMessage(
    ADMIN,
    `üì• <b>–ó–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞:</b>\n\nüë§ <b>–Ü–º‚Äô—è:</b> ${from.first_name} ${from.last_name || ''}\nüÜî <b>ID:</b> <code>${from.id}</code>\nüîó <b>Username:</b> @${from.username || '–Ω–µ–º–∞—î'}`,
    {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [[
          { text: '‚úÖ –ù–∞–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø', callback_data: `approve_${from.id}` },
          { text: '‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data: `reject_${from.id}` }
        ]]
      }
    }
    );
});

bot.action(/approve_(\d+)/, async (ctx) => {
  const adminId = ctx.from.id;

  if (ADMIN !== adminId) return ctx.answerCbQuery('‚õîÔ∏è –í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.');

  const userId = parseInt(ctx.match[1]);

  const chat = await bot.telegram.getChat(userId);

  if (chat.type !== 'private') {
    return ctx.reply('‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ ‚Äî —Ü–µ –Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.');
  }

  const added = await addUser({
    id: chat.id,
    first_name: chat.first_name,
    last_name: chat.last_name,
    username: chat.username
  });

  const userInfo = pendingRequests.get(userId);

  if (userInfo) {
    try {
      await bot.telegram.deleteMessage(userInfo.chatId, userInfo.messageId);

    } catch (e) {
      if (e instanceof Error) {
        console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', e.message);
      } else {
        console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', e);
      }
    }

    pendingRequests.delete(userId);
  }

  if (added) {
    await ctx.reply(added);
    await ctx.editMessageReplyMarkup(undefined);
    await bot.telegram.sendMessage(userId, '‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!');

    await sendWelcome(bot, userId);
  } else {
    ctx.answerCbQuery('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –¥–æ—Å—Ç—É–ø.');
  }
});

bot.action(/reject_(\d+)/, async (ctx) => {
  const adminId = ctx.from.id;

  if (ADMIN !== adminId) return ctx.answerCbQuery('‚õîÔ∏è –í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.');

  const rejectedId = parseInt(ctx.match[1]);

  ctx.answerCbQuery('‚ùå –ó–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.');
  ctx.editMessageReplyMarkup(undefined); // remove inline keyboard

  bot.telegram.sendMessage(
    rejectedId,
    '‚ùå –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
  );
});

bot.command('users', async (ctx) => {
  if (ADMIN !== ctx.from.id) return ctx.reply('‚õîÔ∏è –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤');

  const users = getAllUsers();

  if (users.length === 0) return ctx.reply('üïµüèº‚Äç‚ôÇÔ∏è –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.');


  for (const user of users) {
    const text = `üë§ <b>${user.first_name || ''} ${user.last_name || ''}</b>
      üÜî <code>${user.user_id}</code>
      üîó @${user.username || '–Ω–µ–º–∞—î'}`;

    await ctx.reply(text, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [[
          { text: `‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ ${user.first_name || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'} ${user.last_name || user.user_id}`, callback_data: `remove_user_${user.user_id}` }
        ]]
      }
    });
  }
});

bot.action(/remove_user_(\d+)/, async (ctx) => {
  const adminId = ctx.from.id;

  if (ADMIN !== adminId) return ctx.answerCbQuery('‚õîÔ∏è –í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.');

  const userId = parseInt(ctx.match[1]);

  const removed = await removeUser(userId);

  if (removed) {
    await ctx.answerCbQuery('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ');
    await ctx.editMessageReplyMarkup(undefined);

    // –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    try {
      await bot.telegram.sendMessage(
        userId,
        '‚õîÔ∏è –í–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
      );
    } catch (e) {
      // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ –∑–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –±–æ—Ç–∞ ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }

    await ctx.reply(`‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –≤–∏–¥–∞–ª–µ–Ω–∏–π.`);
  } else {
    ctx.answerCbQuery('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É.');
  }
});

bot.use(async (ctx, next) => {
  const userId = ctx.from?.id;

  if (!userId) {
    // –Ø–∫—â–æ –Ω–µ–º–∞—î info –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
    return;
  }

  if (isUserAllowed(userId) || ADMIN === userId) {
    // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É
    return next();
  } else {
    // –Ø–∫—â–æ –¥–æ—Å—Ç—É–ø –∑–∞–∫—Ä–∏—Ç–æ
    await ctx.editMessageText('‚õîÔ∏è –í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.');
    // –ù–µ –≤–∏–∫–æ–Ω—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏
  }
});

bot.action('open_menu', async (ctx) => {
  await ctx.editMessageText('üèÜ –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–ø—Ä–∞–≤:', Markup.inlineKeyboard(getFolderList(foldersData)));
});

bot.action('close_menu', async (ctx) => {
  await ctx.editMessageText('üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.', Markup.inlineKeyboard([
    [Markup.button.callback('üèãüèº‚Äç‚ôÇÔ∏è –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:', 'open_menu')]
  ]));
});

bot.action(/open_folder:(.+)/, async (ctx) => {
  const folderId = ctx.match[1];
  const folder = foldersData.find((f: FolderType) => f.folderId === folderId);
  const chatId = ctx.chat?.id;

  if (chatId) {
    userFolderState.set(chatId, folderId);
  }

  if (!folder) {
    return ctx.reply('‚ùå –ü–∞–ø–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
  }

  const buttons = folder.dataList.map((video: FileType) => {
    const shortId = `vid${videoCounter++}`;
    fileIdMap.set(shortId, video.fileId);

    return [Markup.button.callback(video.fileName, `play_video:${shortId}`)];
  });

  buttons.push([Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_folders')]);

    await ctx.editMessageText(
      `üìÅ *–ö–∞—Ç–µ–≥–æ—Ä—ñ—è*: ${folder.folderName}\nüîΩ –û–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤—É:`,
    {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard(buttons)
    }
  );
});

bot.action(/play_video:(.+)/, async (ctx) => {
  const shortId = ctx.match[1];
  const fileId = fileIdMap.get(shortId);
  const chatId = ctx.chat?.id;
  

  if (!fileId) {
    return ctx.reply('‚ùå –í—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
  }

  if (!chatId) {
    return ctx.reply('‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∞—Ç.');
  }


  await ctx.answerCbQuery();
  // Delete previous video message if exists
  await deletePreviousVideo(chatId, ctx.telegram, lastVideoMessageMap);

  // Send new video
  const sentMessage = await ctx.replyWithVideo(fileId, {
    caption: '–û—Å—å –≤–∞—à–∞ –≤–ø—Ä–∞–≤–∞:',
  });
  // üíæ Save new message ID
  lastVideoMessageMap.set(chatId, sentMessage.message_id);
});

bot.action('back_to_folders', async (ctx) => {
  const chatId = ctx.chat?.id;

  if (chatId) {
    // Attempt to delete the previous video message if it exists
    await deletePreviousVideo(chatId, ctx.telegram, lastVideoMessageMap);
  }

  await ctx.editMessageText(
    'üèÜ –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–ø—Ä–∞–≤:',
    Markup.inlineKeyboard(getFolderList(foldersData))
  );
});

// Start the bot
(async () => {
  try {
    console.log('üîΩ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ Google Drive...');
    await downloadDatabaseFromDrive();
  } catch (err) {
    console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–∞–∑—É –∑ Google Drive. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É.');
    initDB(dbPath);
  }

  initDB(dbPath);

  db = getDB();

  await bot.launch();
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!');
})();


process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

